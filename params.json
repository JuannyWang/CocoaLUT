{"name":"CocoaLUT","tagline":"LUT (3D lookup tables) for Cocoa applications.","body":"# CocoaLUT\r\n\r\n[![Build Status](http://img.shields.io/travis/videovillage/CocoaLUT.svg?style=flat)](https://travis-ci.org/videovillage/CocoaLUT)\r\n[![Coverage Status](https://img.shields.io/coveralls/videovillage/CocoaLUT.svg?style=flat)](https://coveralls.io/r/videovillage/CocoaLUT?branch=master)\r\n[![Version](https://img.shields.io/cocoapods/v/CocoaLUT.svg?style=flat)](http://cocoadocs.org/docsets/CocoaLUT)\r\n[![Platform](https://img.shields.io/cocoapods/p/CocoaLUT.svg?style=flat)](http://cocoadocs.org/docsets/CocoaLUT)\r\n[![License](https://img.shields.io/cocoapods/l/CocoaLUT.svg?style=flat)](http://cocoadocs.org/docsets/CocoaLUT)\r\n\r\nCocoaLUT is a tool for importing, exporting, and manipulating [3D look up tables](https://en.wikipedia.org/wiki/3D_lookup_table) (3D LUTs) and 1D look up tables (1D LUTs) for colors. LUTs are often used in film and video finishing, graphics, video games, and rendering.\r\n\r\nThe goal of this project is to have a fast, modern Objective-C (and soon, Swift) library that works on both iOS and OS X.\r\n\r\n[![Lattice](lattice.png)](http://lattice.videovillage.co)\r\n\r\n## Features\r\n\r\n- Reads and writes 3D LUTs\r\n  - DaVinci Resolve Cube LUT (.cube)\r\n  - Autodesk 3D LUT (.3dl)\r\n  - Quantel 3D LUT (.txt)\r\n  - FSI DAT 3D LUT (.dat)\r\n  - DVS Clipster 3D LUT (.xml, .txt)\r\n  - Nucoda CMS LUT (.cms)\r\n  - Resolve DAT 3D LUT (.dat)\r\n  - DaVinci 3D LUT (.davlut)\r\n  - Unwrapped Texture LUT Image (.tiff, .dpx, .png)\r\n  - CMS Test Pattern LUT Image (.tiff, .dpx, .png)\r\n  - Hald CLUT Image (.tiff, .dpx, .png)\r\n- Reads and writes 1D LUTs\r\n  - DaVinci Resolve Cube LUT (.cube)\r\n  - Nucoda CMS LUT (.cms)\r\n  - DaVinci Resolve 1D LUT (.ilut, .olut)\r\n  - Discreet 1D LUT (.lut)\r\n  - Arri Look 1D tone map only (.xml) \r\n- Reads non-LUT formats as LUTs\r\n  - Arri Look (.xml) as a 3D LUT\r\n  - ICC/ColorSync Profiles (.icc, .icm, .pf, .prof) as a 3D LUT *(OS X only)*\r\n- Has a format-independent internal data structure. You can create LUTs and use them in-memory.\r\n- Apply LUTs to NSImage, CIImage, and UIImage\r\n- Generate Core Image Filters ([VVLUT1DFilter](https://github.com/videovillage/VVLUT1DFilter) / CIColorCube) from LUTs\r\n- Generate visualizations for LUTs with Scene Kit\r\n- Resize LUTs\r\n- Reverse 1D LUTs\r\n- Extract the color shift from a 3D LUT\r\n- Extract the contrast shift from a 3D LUT\r\n- Convert the color space or color temperature of a LUT\r\n\r\n## Installation\r\n\r\nCocoaLUT is available through [CocoaPods](http://cocoapods.org), to install\r\nit simply add the following line to your Podfile:\r\n\r\n    pod 'CocoaLUT'\r\n\r\nTo gain full functionality you should also probably add [VVLUT1DFilter](https://github.com/videovillage/VVLUT1DFilter), a Core Image filter optimized for 1D LUTs, and [VVSceneLinearImageRep](https://github.com/videovillage/VVSceneLinearImageRep), a subclass of NSBitmapImageRep that specifically handles EXR data.\r\n\r\n    pod 'VVLUT1DFilter'\r\n    pod 'VVSceneLinearImageRep'\r\n\r\n## Related\r\n\r\nThis project uses [LUTSpec](http://github.com/wilg/LUTSpec) for UTI standardization.\r\n\r\nDo you need something like this in Python? Try [pylut](http://github.com/gregcotten/pylut).\r\n\r\n\r\n## Authors\r\n\r\n- [Wil Gieseler](https://github.com/wilg) (@wilg)\r\n- [Greg Cotten](https://github.com/gregcotten) (@gregcotten)\r\n- [Tashi Trieu](https://github.com/tashdor) (@tashitrieu) - Additional Color Science\r\n\r\n## License\r\n\r\nCocoaLUT is available under the MIT license. See the LICENSE file for more info.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}